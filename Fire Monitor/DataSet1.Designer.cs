//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Fire_Monitor {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : global::System.Data.DataSet {
        
        private sensorsDataTable tablesensors;
        
        private settingsDataTable tablesettings;
        
        private sensor_typesDataTable tablesensor_types;
        
        private tmp_dataDataTable tabletmp_data;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["sensors"] != null)) {
                    base.Tables.Add(new sensorsDataTable(ds.Tables["sensors"]));
                }
                if ((ds.Tables["settings"] != null)) {
                    base.Tables.Add(new settingsDataTable(ds.Tables["settings"]));
                }
                if ((ds.Tables["sensor_types"] != null)) {
                    base.Tables.Add(new sensor_typesDataTable(ds.Tables["sensor_types"]));
                }
                if ((ds.Tables["tmp_data"] != null)) {
                    base.Tables.Add(new tmp_dataDataTable(ds.Tables["tmp_data"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sensorsDataTable sensors {
            get {
                return this.tablesensors;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public settingsDataTable settings {
            get {
                return this.tablesettings;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public sensor_typesDataTable sensor_types {
            get {
                return this.tablesensor_types;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public tmp_dataDataTable tmp_data {
            get {
                return this.tabletmp_data;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["sensors"] != null)) {
                    base.Tables.Add(new sensorsDataTable(ds.Tables["sensors"]));
                }
                if ((ds.Tables["settings"] != null)) {
                    base.Tables.Add(new settingsDataTable(ds.Tables["settings"]));
                }
                if ((ds.Tables["sensor_types"] != null)) {
                    base.Tables.Add(new sensor_typesDataTable(ds.Tables["sensor_types"]));
                }
                if ((ds.Tables["tmp_data"] != null)) {
                    base.Tables.Add(new tmp_dataDataTable(ds.Tables["tmp_data"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablesensors = ((sensorsDataTable)(base.Tables["sensors"]));
            if ((initTable == true)) {
                if ((this.tablesensors != null)) {
                    this.tablesensors.InitVars();
                }
            }
            this.tablesettings = ((settingsDataTable)(base.Tables["settings"]));
            if ((initTable == true)) {
                if ((this.tablesettings != null)) {
                    this.tablesettings.InitVars();
                }
            }
            this.tablesensor_types = ((sensor_typesDataTable)(base.Tables["sensor_types"]));
            if ((initTable == true)) {
                if ((this.tablesensor_types != null)) {
                    this.tablesensor_types.InitVars();
                }
            }
            this.tabletmp_data = ((tmp_dataDataTable)(base.Tables["tmp_data"]));
            if ((initTable == true)) {
                if ((this.tabletmp_data != null)) {
                    this.tabletmp_data.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablesensors = new sensorsDataTable();
            base.Tables.Add(this.tablesensors);
            this.tablesettings = new settingsDataTable();
            base.Tables.Add(this.tablesettings);
            this.tablesensor_types = new sensor_typesDataTable();
            base.Tables.Add(this.tablesensor_types);
            this.tabletmp_data = new tmp_dataDataTable();
            base.Tables.Add(this.tabletmp_data);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesensors() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesettings() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesensor_types() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializetmp_data() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void sensorsRowChangeEventHandler(object sender, sensorsRowChangeEvent e);
        
        public delegate void settingsRowChangeEventHandler(object sender, settingsRowChangeEvent e);
        
        public delegate void sensor_typesRowChangeEventHandler(object sender, sensor_typesRowChangeEvent e);
        
        public delegate void tmp_dataRowChangeEventHandler(object sender, tmp_dataRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class sensorsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnpin;
            
            private global::System.Data.DataColumn columntype;
            
            private global::System.Data.DataColumn columndescr;
            
            private global::System.Data.DataColumn columnwarn;
            
            private global::System.Data.DataColumn columnalarm;
            
            private global::System.Data.DataColumn columncolor;
            
            private global::System.Data.DataColumn columntray;
            
            private global::System.Data.DataColumn columncdef;
            
            private global::System.Data.DataColumn columngraphing;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sensorsDataTable() {
                this.TableName = "sensors";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sensorsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected sensorsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn pinColumn {
                get {
                    return this.columnpin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descrColumn {
                get {
                    return this.columndescr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn warnColumn {
                get {
                    return this.columnwarn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn alarmColumn {
                get {
                    return this.columnalarm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn colorColumn {
                get {
                    return this.columncolor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn trayColumn {
                get {
                    return this.columntray;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cdefColumn {
                get {
                    return this.columncdef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn graphingColumn {
                get {
                    return this.columngraphing;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sensorsRow this[int index] {
                get {
                    return ((sensorsRow)(this.Rows[index]));
                }
            }
            
            public event sensorsRowChangeEventHandler sensorsRowChanging;
            
            public event sensorsRowChangeEventHandler sensorsRowChanged;
            
            public event sensorsRowChangeEventHandler sensorsRowDeleting;
            
            public event sensorsRowChangeEventHandler sensorsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsensorsRow(sensorsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sensorsRow AddsensorsRow(int pin, int type, string descr, double warn, double alarm, string color, bool tray, string cdef, bool graphing) {
                sensorsRow rowsensorsRow = ((sensorsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        pin,
                        type,
                        descr,
                        warn,
                        alarm,
                        color,
                        tray,
                        cdef,
                        graphing};
                rowsensorsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsensorsRow);
                return rowsensorsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                sensorsDataTable cln = ((sensorsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new sensorsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnpin = base.Columns["pin"];
                this.columntype = base.Columns["type"];
                this.columndescr = base.Columns["descr"];
                this.columnwarn = base.Columns["warn"];
                this.columnalarm = base.Columns["alarm"];
                this.columncolor = base.Columns["color"];
                this.columntray = base.Columns["tray"];
                this.columncdef = base.Columns["cdef"];
                this.columngraphing = base.Columns["graphing"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnpin = new global::System.Data.DataColumn("pin", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpin);
                this.columntype = new global::System.Data.DataColumn("type", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntype);
                this.columndescr = new global::System.Data.DataColumn("descr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescr);
                this.columnwarn = new global::System.Data.DataColumn("warn", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnwarn);
                this.columnalarm = new global::System.Data.DataColumn("alarm", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnalarm);
                this.columncolor = new global::System.Data.DataColumn("color", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncolor);
                this.columntray = new global::System.Data.DataColumn("tray", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntray);
                this.columncdef = new global::System.Data.DataColumn("cdef", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncdef);
                this.columngraphing = new global::System.Data.DataColumn("graphing", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columngraphing);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("sensorsKey1", new global::System.Data.DataColumn[] {
                                this.columnpin}, false));
                this.columnpin.AutoIncrementSeed = 1;
                this.columnpin.AllowDBNull = false;
                this.columnpin.Unique = true;
                this.columntype.AllowDBNull = false;
                this.columndescr.DefaultValue = ((string)("\"\""));
                this.columnwarn.AllowDBNull = false;
                this.columnwarn.DefaultValue = ((double)(80));
                this.columnalarm.AllowDBNull = false;
                this.columnalarm.DefaultValue = ((double)(90));
                this.columncolor.AllowDBNull = false;
                this.columncolor.DefaultValue = ((string)("#000000"));
                this.columntray.AllowDBNull = false;
                this.columntray.DefaultValue = ((bool)(false));
                this.columncdef.DefaultValue = ((string)(""));
                this.columngraphing.AllowDBNull = false;
                this.columngraphing.DefaultValue = ((bool)(true));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sensorsRow NewsensorsRow() {
                return ((sensorsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new sensorsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(sensorsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sensorsRowChanged != null)) {
                    this.sensorsRowChanged(this, new sensorsRowChangeEvent(((sensorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sensorsRowChanging != null)) {
                    this.sensorsRowChanging(this, new sensorsRowChangeEvent(((sensorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sensorsRowDeleted != null)) {
                    this.sensorsRowDeleted(this, new sensorsRowChangeEvent(((sensorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sensorsRowDeleting != null)) {
                    this.sensorsRowDeleting(this, new sensorsRowChangeEvent(((sensorsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesensorsRow(sensorsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "sensorsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class settingsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnip;
            
            private global::System.Data.DataColumn columncommunity;
            
            private global::System.Data.DataColumn columntimeout;
            
            private global::System.Data.DataColumn columnretry;
            
            private global::System.Data.DataColumn columnhist;
            
            private global::System.Data.DataColumn columnpopups;
            
            private global::System.Data.DataColumn columnsounds;
            
            private global::System.Data.DataColumn columnfirst_run;
            
            private global::System.Data.DataColumn columnrigid_graph;
            
            private global::System.Data.DataColumn columnupper_limit;
            
            private global::System.Data.DataColumn columnlower_limit;
            
            private global::System.Data.DataColumn columnline_width;
            
            private global::System.Data.DataColumn columnline_area;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public settingsDataTable() {
                this.TableName = "settings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal settingsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected settingsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ipColumn {
                get {
                    return this.columnip;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn communityColumn {
                get {
                    return this.columncommunity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn timeoutColumn {
                get {
                    return this.columntimeout;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn retryColumn {
                get {
                    return this.columnretry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn histColumn {
                get {
                    return this.columnhist;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn popupsColumn {
                get {
                    return this.columnpopups;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn soundsColumn {
                get {
                    return this.columnsounds;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn first_runColumn {
                get {
                    return this.columnfirst_run;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rigid_graphColumn {
                get {
                    return this.columnrigid_graph;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn upper_limitColumn {
                get {
                    return this.columnupper_limit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lower_limitColumn {
                get {
                    return this.columnlower_limit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn line_widthColumn {
                get {
                    return this.columnline_width;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn line_areaColumn {
                get {
                    return this.columnline_area;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public settingsRow this[int index] {
                get {
                    return ((settingsRow)(this.Rows[index]));
                }
            }
            
            public event settingsRowChangeEventHandler settingsRowChanging;
            
            public event settingsRowChangeEventHandler settingsRowChanged;
            
            public event settingsRowChangeEventHandler settingsRowDeleting;
            
            public event settingsRowChangeEventHandler settingsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsettingsRow(settingsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public settingsRow AddsettingsRow(string ip, string community, int timeout, int retry, int hist, bool popups, bool sounds, bool first_run, bool rigid_graph, double upper_limit, double lower_limit, short line_width, short line_area) {
                settingsRow rowsettingsRow = ((settingsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ip,
                        community,
                        timeout,
                        retry,
                        hist,
                        popups,
                        sounds,
                        first_run,
                        rigid_graph,
                        upper_limit,
                        lower_limit,
                        line_width,
                        line_area};
                rowsettingsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsettingsRow);
                return rowsettingsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                settingsDataTable cln = ((settingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new settingsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnip = base.Columns["ip"];
                this.columncommunity = base.Columns["community"];
                this.columntimeout = base.Columns["timeout"];
                this.columnretry = base.Columns["retry"];
                this.columnhist = base.Columns["hist"];
                this.columnpopups = base.Columns["popups"];
                this.columnsounds = base.Columns["sounds"];
                this.columnfirst_run = base.Columns["first_run"];
                this.columnrigid_graph = base.Columns["rigid_graph"];
                this.columnupper_limit = base.Columns["upper_limit"];
                this.columnlower_limit = base.Columns["lower_limit"];
                this.columnline_width = base.Columns["line_width"];
                this.columnline_area = base.Columns["line_area"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnip = new global::System.Data.DataColumn("ip", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnip);
                this.columncommunity = new global::System.Data.DataColumn("community", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncommunity);
                this.columntimeout = new global::System.Data.DataColumn("timeout", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntimeout);
                this.columnretry = new global::System.Data.DataColumn("retry", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnretry);
                this.columnhist = new global::System.Data.DataColumn("hist", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhist);
                this.columnpopups = new global::System.Data.DataColumn("popups", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpopups);
                this.columnsounds = new global::System.Data.DataColumn("sounds", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsounds);
                this.columnfirst_run = new global::System.Data.DataColumn("first_run", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfirst_run);
                this.columnrigid_graph = new global::System.Data.DataColumn("rigid_graph", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrigid_graph);
                this.columnupper_limit = new global::System.Data.DataColumn("upper_limit", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnupper_limit);
                this.columnlower_limit = new global::System.Data.DataColumn("lower_limit", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlower_limit);
                this.columnline_width = new global::System.Data.DataColumn("line_width", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnline_width);
                this.columnline_area = new global::System.Data.DataColumn("line_area", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnline_area);
                this.columnip.AllowDBNull = false;
                this.columnip.DefaultValue = ((string)("172.16.100.2"));
                this.columncommunity.AllowDBNull = false;
                this.columncommunity.DefaultValue = ((string)("00000000000"));
                this.columntimeout.AllowDBNull = false;
                this.columntimeout.DefaultValue = ((int)(200));
                this.columnretry.AllowDBNull = false;
                this.columnretry.DefaultValue = ((int)(2));
                this.columnhist.AllowDBNull = false;
                this.columnhist.DefaultValue = ((int)(5));
                this.columnpopups.AllowDBNull = false;
                this.columnpopups.DefaultValue = ((bool)(true));
                this.columnsounds.AllowDBNull = false;
                this.columnsounds.DefaultValue = ((bool)(true));
                this.columnfirst_run.AllowDBNull = false;
                this.columnfirst_run.DefaultValue = ((bool)(true));
                this.columnrigid_graph.AllowDBNull = false;
                this.columnrigid_graph.DefaultValue = ((bool)(false));
                this.columnupper_limit.AllowDBNull = false;
                this.columnupper_limit.DefaultValue = ((double)(120));
                this.columnlower_limit.AllowDBNull = false;
                this.columnlower_limit.DefaultValue = ((double)(0));
                this.columnline_width.AllowDBNull = false;
                this.columnline_width.DefaultValue = ((short)(2));
                this.columnline_area.AllowDBNull = false;
                this.columnline_area.DefaultValue = ((short)(10));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public settingsRow NewsettingsRow() {
                return ((settingsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new settingsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(settingsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.settingsRowChanged != null)) {
                    this.settingsRowChanged(this, new settingsRowChangeEvent(((settingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.settingsRowChanging != null)) {
                    this.settingsRowChanging(this, new settingsRowChangeEvent(((settingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.settingsRowDeleted != null)) {
                    this.settingsRowDeleted(this, new settingsRowChangeEvent(((settingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.settingsRowDeleting != null)) {
                    this.settingsRowDeleting(this, new settingsRowChangeEvent(((settingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesettingsRow(settingsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "settingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class sensor_typesDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columntype_id;
            
            private global::System.Data.DataColumn columndescr;
            
            private global::System.Data.DataColumn columncdef;
            
            private global::System.Data.DataColumn columnsymbol;
            
            private global::System.Data.DataColumn columnicon;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sensor_typesDataTable() {
                this.TableName = "sensor_types";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sensor_typesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected sensor_typesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn type_idColumn {
                get {
                    return this.columntype_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descrColumn {
                get {
                    return this.columndescr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn cdefColumn {
                get {
                    return this.columncdef;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn symbolColumn {
                get {
                    return this.columnsymbol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn iconColumn {
                get {
                    return this.columnicon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sensor_typesRow this[int index] {
                get {
                    return ((sensor_typesRow)(this.Rows[index]));
                }
            }
            
            public event sensor_typesRowChangeEventHandler sensor_typesRowChanging;
            
            public event sensor_typesRowChangeEventHandler sensor_typesRowChanged;
            
            public event sensor_typesRowChangeEventHandler sensor_typesRowDeleting;
            
            public event sensor_typesRowChangeEventHandler sensor_typesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addsensor_typesRow(sensor_typesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sensor_typesRow Addsensor_typesRow(int type_id, string descr, string cdef, string symbol, string icon) {
                sensor_typesRow rowsensor_typesRow = ((sensor_typesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        type_id,
                        descr,
                        cdef,
                        symbol,
                        icon};
                rowsensor_typesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowsensor_typesRow);
                return rowsensor_typesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                sensor_typesDataTable cln = ((sensor_typesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new sensor_typesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntype_id = base.Columns["type_id"];
                this.columndescr = base.Columns["descr"];
                this.columncdef = base.Columns["cdef"];
                this.columnsymbol = base.Columns["symbol"];
                this.columnicon = base.Columns["icon"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntype_id = new global::System.Data.DataColumn("type_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntype_id);
                this.columndescr = new global::System.Data.DataColumn("descr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescr);
                this.columncdef = new global::System.Data.DataColumn("cdef", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncdef);
                this.columnsymbol = new global::System.Data.DataColumn("symbol", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsymbol);
                this.columnicon = new global::System.Data.DataColumn("icon", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnicon);
                this.columntype_id.DefaultValue = ((int)(0));
                this.columndescr.DefaultValue = ((string)("\"\""));
                this.columncdef.DefaultValue = ((string)(""));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sensor_typesRow Newsensor_typesRow() {
                return ((sensor_typesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new sensor_typesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(sensor_typesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.sensor_typesRowChanged != null)) {
                    this.sensor_typesRowChanged(this, new sensor_typesRowChangeEvent(((sensor_typesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.sensor_typesRowChanging != null)) {
                    this.sensor_typesRowChanging(this, new sensor_typesRowChangeEvent(((sensor_typesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.sensor_typesRowDeleted != null)) {
                    this.sensor_typesRowDeleted(this, new sensor_typesRowChangeEvent(((sensor_typesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.sensor_typesRowDeleting != null)) {
                    this.sensor_typesRowDeleting(this, new sensor_typesRowChangeEvent(((sensor_typesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removesensor_typesRow(sensor_typesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "sensor_typesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class tmp_dataDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnimage;
            
            private global::System.Data.DataColumn columnsensor;
            
            private global::System.Data.DataColumn columnresult;
            
            private global::System.Data.DataColumn columncolor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tmp_dataDataTable() {
                this.TableName = "tmp_data";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tmp_dataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected tmp_dataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn imageColumn {
                get {
                    return this.columnimage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn sensorColumn {
                get {
                    return this.columnsensor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn resultColumn {
                get {
                    return this.columnresult;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn colorColumn {
                get {
                    return this.columncolor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tmp_dataRow this[int index] {
                get {
                    return ((tmp_dataRow)(this.Rows[index]));
                }
            }
            
            public event tmp_dataRowChangeEventHandler tmp_dataRowChanging;
            
            public event tmp_dataRowChangeEventHandler tmp_dataRowChanged;
            
            public event tmp_dataRowChangeEventHandler tmp_dataRowDeleting;
            
            public event tmp_dataRowChangeEventHandler tmp_dataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addtmp_dataRow(tmp_dataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tmp_dataRow Addtmp_dataRow(byte[] image, string sensor, string result, byte[] color) {
                tmp_dataRow rowtmp_dataRow = ((tmp_dataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        image,
                        sensor,
                        result,
                        color};
                rowtmp_dataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowtmp_dataRow);
                return rowtmp_dataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                tmp_dataDataTable cln = ((tmp_dataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new tmp_dataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnimage = base.Columns["image"];
                this.columnsensor = base.Columns["sensor"];
                this.columnresult = base.Columns["result"];
                this.columncolor = base.Columns["color"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnimage = new global::System.Data.DataColumn("image", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnimage);
                this.columnsensor = new global::System.Data.DataColumn("sensor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsensor);
                this.columnresult = new global::System.Data.DataColumn("result", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnresult);
                this.columncolor = new global::System.Data.DataColumn("color", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncolor);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tmp_dataRow Newtmp_dataRow() {
                return ((tmp_dataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new tmp_dataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(tmp_dataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.tmp_dataRowChanged != null)) {
                    this.tmp_dataRowChanged(this, new tmp_dataRowChangeEvent(((tmp_dataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.tmp_dataRowChanging != null)) {
                    this.tmp_dataRowChanging(this, new tmp_dataRowChangeEvent(((tmp_dataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.tmp_dataRowDeleted != null)) {
                    this.tmp_dataRowDeleted(this, new tmp_dataRowChangeEvent(((tmp_dataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.tmp_dataRowDeleting != null)) {
                    this.tmp_dataRowDeleting(this, new tmp_dataRowChangeEvent(((tmp_dataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removetmp_dataRow(tmp_dataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "tmp_dataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class sensorsRow : global::System.Data.DataRow {
            
            private sensorsDataTable tablesensors;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sensorsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesensors = ((sensorsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int pin {
                get {
                    return ((int)(this[this.tablesensors.pinColumn]));
                }
                set {
                    this[this.tablesensors.pinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int type {
                get {
                    return ((int)(this[this.tablesensors.typeColumn]));
                }
                set {
                    this[this.tablesensors.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string descr {
                get {
                    if (this.IsdescrNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablesensors.descrColumn]));
                    }
                }
                set {
                    this[this.tablesensors.descrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double warn {
                get {
                    return ((double)(this[this.tablesensors.warnColumn]));
                }
                set {
                    this[this.tablesensors.warnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double alarm {
                get {
                    return ((double)(this[this.tablesensors.alarmColumn]));
                }
                set {
                    this[this.tablesensors.alarmColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string color {
                get {
                    return ((string)(this[this.tablesensors.colorColumn]));
                }
                set {
                    this[this.tablesensors.colorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool tray {
                get {
                    return ((bool)(this[this.tablesensors.trayColumn]));
                }
                set {
                    this[this.tablesensors.trayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cdef {
                get {
                    if (this.IscdefNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablesensors.cdefColumn]));
                    }
                }
                set {
                    this[this.tablesensors.cdefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool graphing {
                get {
                    return ((bool)(this[this.tablesensors.graphingColumn]));
                }
                set {
                    this[this.tablesensors.graphingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescrNull() {
                return this.IsNull(this.tablesensors.descrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescrNull() {
                this[this.tablesensors.descrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscdefNull() {
                return this.IsNull(this.tablesensors.cdefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcdefNull() {
                this[this.tablesensors.cdefColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class settingsRow : global::System.Data.DataRow {
            
            private settingsDataTable tablesettings;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal settingsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesettings = ((settingsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ip {
                get {
                    return ((string)(this[this.tablesettings.ipColumn]));
                }
                set {
                    this[this.tablesettings.ipColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string community {
                get {
                    return ((string)(this[this.tablesettings.communityColumn]));
                }
                set {
                    this[this.tablesettings.communityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int timeout {
                get {
                    return ((int)(this[this.tablesettings.timeoutColumn]));
                }
                set {
                    this[this.tablesettings.timeoutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int retry {
                get {
                    return ((int)(this[this.tablesettings.retryColumn]));
                }
                set {
                    this[this.tablesettings.retryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int hist {
                get {
                    return ((int)(this[this.tablesettings.histColumn]));
                }
                set {
                    this[this.tablesettings.histColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool popups {
                get {
                    return ((bool)(this[this.tablesettings.popupsColumn]));
                }
                set {
                    this[this.tablesettings.popupsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool sounds {
                get {
                    return ((bool)(this[this.tablesettings.soundsColumn]));
                }
                set {
                    this[this.tablesettings.soundsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool first_run {
                get {
                    return ((bool)(this[this.tablesettings.first_runColumn]));
                }
                set {
                    this[this.tablesettings.first_runColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool rigid_graph {
                get {
                    return ((bool)(this[this.tablesettings.rigid_graphColumn]));
                }
                set {
                    this[this.tablesettings.rigid_graphColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double upper_limit {
                get {
                    return ((double)(this[this.tablesettings.upper_limitColumn]));
                }
                set {
                    this[this.tablesettings.upper_limitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double lower_limit {
                get {
                    return ((double)(this[this.tablesettings.lower_limitColumn]));
                }
                set {
                    this[this.tablesettings.lower_limitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short line_width {
                get {
                    return ((short)(this[this.tablesettings.line_widthColumn]));
                }
                set {
                    this[this.tablesettings.line_widthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short line_area {
                get {
                    return ((short)(this[this.tablesettings.line_areaColumn]));
                }
                set {
                    this[this.tablesettings.line_areaColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class sensor_typesRow : global::System.Data.DataRow {
            
            private sensor_typesDataTable tablesensor_types;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal sensor_typesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesensor_types = ((sensor_typesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int type_id {
                get {
                    try {
                        return ((int)(this[this.tablesensor_types.type_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'type_id\' in table \'sensor_types\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesensor_types.type_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string descr {
                get {
                    try {
                        return ((string)(this[this.tablesensor_types.descrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'descr\' in table \'sensor_types\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesensor_types.descrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string cdef {
                get {
                    if (this.IscdefNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tablesensor_types.cdefColumn]));
                    }
                }
                set {
                    this[this.tablesensor_types.cdefColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string symbol {
                get {
                    try {
                        return ((string)(this[this.tablesensor_types.symbolColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'symbol\' in table \'sensor_types\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesensor_types.symbolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string icon {
                get {
                    try {
                        return ((string)(this[this.tablesensor_types.iconColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'icon\' in table \'sensor_types\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesensor_types.iconColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istype_idNull() {
                return this.IsNull(this.tablesensor_types.type_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settype_idNull() {
                this[this.tablesensor_types.type_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescrNull() {
                return this.IsNull(this.tablesensor_types.descrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescrNull() {
                this[this.tablesensor_types.descrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscdefNull() {
                return this.IsNull(this.tablesensor_types.cdefColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcdefNull() {
                this[this.tablesensor_types.cdefColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssymbolNull() {
                return this.IsNull(this.tablesensor_types.symbolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsymbolNull() {
                this[this.tablesensor_types.symbolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsiconNull() {
                return this.IsNull(this.tablesensor_types.iconColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeticonNull() {
                this[this.tablesensor_types.iconColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class tmp_dataRow : global::System.Data.DataRow {
            
            private tmp_dataDataTable tabletmp_data;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal tmp_dataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabletmp_data = ((tmp_dataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] image {
                get {
                    try {
                        return ((byte[])(this[this.tabletmp_data.imageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'image\' in table \'tmp_data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletmp_data.imageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string sensor {
                get {
                    try {
                        return ((string)(this[this.tabletmp_data.sensorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'sensor\' in table \'tmp_data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletmp_data.sensorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string result {
                get {
                    try {
                        return ((string)(this[this.tabletmp_data.resultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'result\' in table \'tmp_data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletmp_data.resultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] color {
                get {
                    try {
                        return ((byte[])(this[this.tabletmp_data.colorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'color\' in table \'tmp_data\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabletmp_data.colorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsimageNull() {
                return this.IsNull(this.tabletmp_data.imageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetimageNull() {
                this[this.tabletmp_data.imageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssensorNull() {
                return this.IsNull(this.tabletmp_data.sensorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsensorNull() {
                this[this.tabletmp_data.sensorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsresultNull() {
                return this.IsNull(this.tabletmp_data.resultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetresultNull() {
                this[this.tabletmp_data.resultColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscolorNull() {
                return this.IsNull(this.tabletmp_data.colorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcolorNull() {
                this[this.tabletmp_data.colorColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class sensorsRowChangeEvent : global::System.EventArgs {
            
            private sensorsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sensorsRowChangeEvent(sensorsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sensorsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class settingsRowChangeEvent : global::System.EventArgs {
            
            private settingsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public settingsRowChangeEvent(settingsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public settingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class sensor_typesRowChangeEvent : global::System.EventArgs {
            
            private sensor_typesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sensor_typesRowChangeEvent(sensor_typesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sensor_typesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class tmp_dataRowChangeEvent : global::System.EventArgs {
            
            private tmp_dataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tmp_dataRowChangeEvent(tmp_dataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public tmp_dataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591